/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 71 generated on 2017-05-04 23:45:59.412783
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==71);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((1.0)*x9);
x13=((0.135)*x7);
x14=((0.96)*x0);
x15=((0.175)*x3);
x16=((0.96)*x7);
x17=((0.175)*x7);
x18=((1.0)*x7);
x19=((0.9)*x1);
x20=((0.175)*x0);
x21=((1.0)*x0);
x22=((0.135)*x6);
x23=((1.0)*x10);
x24=((0.135)*x0);
x25=(x1*x2);
x26=(x10*x6);
x27=(x0*x2);
x28=(x3*x4);
x29=(x1*x4);
x30=(x0*x5);
x31=(x2*x3);
x32=((1.0)*x28);
x33=(x21*x25);
x34=(x18*x25);
x35=((((-1.0)*x32))+x25);
x36=((((-1.0)*x25))+x32);
x37=((((1.0)*x29))+(((1.0)*x31)));
x38=(x35*x6);
x39=(x36*x5);
x40=(x10*x37);
x41=((((-1.0)*x21*x28))+x33);
x42=((((-1.0)*x18*x28))+x34);
x43=(x21*((x31+x29)));
x44=((-1.0)*x43);
x45=(x18*((x31+x29)));
x46=((-1.0)*x45);
x47=(x10*x41);
x48=(x46*x6);
x49=((((-1.0)*x18*x5))+((x44*x6)));
x50=((((-1.0)*x18*x6))+((x43*x5)));
x51=(((x0*x6))+((x45*x5)));
x52=(x30+x48);
eerot[0]=(((x50*x8))+((x11*((((x49*x9))+x47)))));
eerot[1]=(((x11*x50))+((x8*(((((-1.0)*x12*x49))+(((-1.0)*x23*x41)))))));
eerot[2]=(((x10*x49))+((x9*(((((-1.0)*x33))+((x0*x28)))))));
IkReal x53=((1.0)*x25);
eetrans[0]=((((-1.0)*x14*x53))+((x0*x19))+((x14*x28))+((x9*(((((-1.0)*x24*x53))+((x24*x28))))))+x20+((x10*((((x22*x44))+(((-1.0)*x13*x5))))))+((x20*x29))+((x15*x27)));
eerot[3]=(((x51*x8))+((x11*((((x10*x42))+((x52*x9)))))));
eerot[4]=(((x11*x51))+((x8*(((((-1.0)*x12*x52))+(((-1.0)*x23*x42)))))));
eerot[5]=(((x10*x52))+((x9*(((((-1.0)*x34))+((x28*x7)))))));
IkReal x54=((1.0)*x25);
eetrans[1]=((((-1.0)*x16*x54))+((x19*x7))+((x9*(((((-1.0)*x13*x54))+((x13*x28))))))+((x16*x28))+((x17*x29))+x17+((x10*((((x22*x46))+((x24*x5))))))+((x15*x2*x7)));
eerot[6]=(((x39*x8))+((x11*((x40+((x38*x9)))))));
eerot[7]=(((x8*(((((-1.0)*x12*x38))+(((-1.0)*x23*x37))))))+((x11*x39)));
eerot[8]=(((x26*x35))+(((-1.0)*x37*x9)));
eetrans[2]=((0.495)+(((0.9)*x3))+((x26*(((((-0.135)*x28))+(((0.135)*x25))))))+(((-0.96)*x31))+(((-0.96)*x29))+(((-0.175)*x25))+((x9*(((((-0.135)*x29))+(((-0.135)*x31))))))+((x15*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.135)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.135)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.495)+pz+(((-0.135)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x59 = IKatan2WithCheck(IkReal(((-1.0)*py)),px,IKFAST_ATAN2_MAGTHRESH);
if(!x59.valid){
continue;
}
IkReal x58=x59.value;
j0array[0]=((-1.0)*x58);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x58)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((0.985837382425558)+(((0.199262580185346)*cj0*px))+(((-0.569321657672417)*pp))+(((0.199262580185346)*py*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((0.985837382425558)+(((0.199262580185346)*cj0*px))+(((-0.569321657672417)*pp))+(((0.199262580185346)*py*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x60=IKasin(((0.985837382425558)+(((0.199262580185346)*cj0*px))+(((-0.569321657672417)*pp))+(((0.199262580185346)*py*sj0))));
j2array[0]=((-2.96128085868733)+(((-1.0)*x60)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.180311794902464)+x60);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x61=cj2*cj2;
IkReal x62=(pz*sj2);
IkReal x63=(cj0*px);
IkReal x64=((0.96)*cj2);
IkReal x65=(py*sj0);
IkReal x66=((5.71428571428571)*sj2);
IkReal x67=((31.3469387755102)*cj2);
IkReal x68=((0.175)*pz);
IkReal x69=(cj2*sj2);
IkReal x70=((0.175)*sj2);
j1eval[0]=(sj2+(((29.3877551020408)*pz))+(((-31.3469387755102)*x62))+(((-1.0)*x65*x66))+(((-1.0)*x65*x67))+(((-1.0)*x63*x67))+(((-1.0)*x63*x66))+(((5.71428571428571)*cj2*pz))+(((5.48571428571429)*cj2)));
j1eval[1]=IKsign(((((-1.0)*x63*x70))+(((0.9)*pz))+(((-0.96)*x62))+(((-1.0)*x64*x65))+(((0.168)*cj2))+(((-1.0)*x63*x64))+((cj2*x68))+(((0.030625)*sj2))+(((-1.0)*x65*x70))));
j1eval[2]=((IKabs(((-0.030625)+(((-0.336)*x69))+(((-0.890975)*x61))+(pz*pz))))+(IKabs(((0.168)+(((-0.1575)*sj2))+(((-0.336)*x61))+(((0.890975)*x69))+(((-1.0)*x68))+((pz*x65))+((pz*x63))+(((-0.864)*cj2))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x71=(cj0*px);
IkReal x72=((0.96)*sj2);
IkReal x73=(py*sj0);
IkReal x74=(cj2*pz);
IkReal x75=(pz*sj2);
IkReal x76=((31.3469387755102)*sj2);
IkReal x77=(cj2*x73);
j1eval[0]=((5.14285714285714)+cj2+(((-31.3469387755102)*x74))+(((-29.3877551020408)*x73))+(((-29.3877551020408)*x71))+(((-5.71428571428571)*x77))+(((-5.71428571428571)*x75))+(((-5.71428571428571)*cj2*x71))+(((-5.48571428571429)*sj2))+((x73*x76))+((x71*x76)));
j1eval[1]=IKsign(((0.1575)+(((-0.96)*x74))+(((-0.175)*cj2*x71))+(((0.030625)*cj2))+(((-0.175)*x75))+(((-0.175)*x77))+(((-0.168)*sj2))+(((-0.9)*x71))+(((-0.9)*x73))+((x72*x73))+((x71*x72))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x78=cj0*cj0;
IkReal x79=py*py;
IkReal x80=px*px;
IkReal x81=pz*pz;
IkReal x82=(cj0*px);
IkReal x83=(py*sj0);
IkReal x84=((32.6530612244898)*x79);
IkReal x85=(x78*x80);
j1eval[0]=((-1.0)+((x78*x84))+(((-65.3061224489796)*x82*x83))+(((11.4285714285714)*x82))+(((11.4285714285714)*x83))+(((-1.0)*x84))+(((-32.6530612244898)*x81))+(((-32.6530612244898)*x85)));
j1eval[1]=IKsign(((-0.030625)+(((-2.0)*x82*x83))+((x78*x79))+(((0.35)*x83))+(((0.35)*x82))+(((-1.0)*x81))+(((-1.0)*x85))+(((-1.0)*x79))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x86=py*py;
IkReal x87=cj0*cj0;
IkReal x88=((0.175)*cj2);
IkReal x89=(cj0*px);
IkReal x90=(py*sj0);
IkReal x91=((0.96)*sj2);
IkReal x92=((0.96)*cj2);
IkReal x93=((0.175)*sj2);
IkReal x94=((0.96)*x89);
CheckValue<IkReal> x95=IKPowWithIntegerCheck(IKsign(((-0.030625)+(((0.35)*x90))+((x86*x87))+(((0.35)*x89))+(((-2.0)*x89*x90))+(((-1.0)*x86))+(((-1.0)*(pz*pz)))+(((-1.0)*x87*(px*px))))),-1);
if(!x95.valid){
continue;
}
CheckValue<IkReal> x96 = IKatan2WithCheck(IkReal(((0.1575)+((x89*x91))+(((0.030625)*cj2))+(((-0.168)*sj2))+((pz*x92))+((pz*x93))+(((-0.9)*x89))+((x90*x91))+(((-0.9)*x90))+(((-1.0)*x88*x89))+(((-1.0)*x88*x90)))),((((-1.0)*x90*x93))+(((-1.0)*x90*x92))+((pz*x91))+(((0.168)*cj2))+(((-0.9)*pz))+(((-1.0)*pz*x88))+(((-1.0)*x89*x92))+(((-1.0)*x89*x93))+(((0.030625)*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x96.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x95.value)))+(x96.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j1);
IkReal x99=((0.96)*cj2);
IkReal x100=(cj0*px);
IkReal x101=((0.175)*cj2);
IkReal x102=((0.175)*sj2);
IkReal x103=((0.96)*sj2);
IkReal x104=((1.0)*x100);
IkReal x105=(sj2*x98);
IkReal x106=((0.175)*x98);
IkReal x107=((1.0)*py*sj0);
IkReal x108=(pz*x98);
IkReal x109=(py*sj0*x97);
evalcond[0]=((-0.9)+(((-0.175)*x97))+((x100*x97))+(((-1.0)*x101))+x108+x109+x103);
evalcond[1]=((((-1.0)*x107*x98))+x106+x102+((pz*x97))+x99+(((-1.0)*x104*x98)));
evalcond[2]=(((x103*x98))+((x102*x97))+((x97*x99))+(((-0.9)*x98))+pz+(((-1.0)*x101*x98)));
evalcond[3]=((0.1116)+(((0.35)*x100))+(((0.35)*py*sj0))+(((1.8)*x100*x97))+(((-1.0)*pp))+(((1.8)*x109))+(((1.8)*x108))+(((-0.315)*x97)));
evalcond[4]=((0.175)+(((-1.0)*x103*x97))+(((0.9)*x97))+((x102*x98))+((x101*x97))+(((-1.0)*x107))+(((-1.0)*x104))+((x98*x99)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x507=cj2*cj2;
IkReal x508=(cj0*px);
IkReal x509=((0.96)*sj2);
IkReal x510=((0.175)*cj2);
IkReal x511=(py*sj0);
IkReal x512=((0.175)*pz);
IkReal x513=(cj2*sj2);
IkReal x514=((1.0)*pz);
CheckValue<IkReal> x515=IKPowWithIntegerCheck(IKsign(((0.1575)+(((0.030625)*cj2))+(((-0.9)*x511))+((x508*x509))+(((-1.0)*sj2*x512))+(((-0.96)*cj2*pz))+(((-0.168)*sj2))+(((-1.0)*x508*x510))+(((-0.9)*x508))+(((-1.0)*x510*x511))+((x509*x511)))),-1);
if(!x515.valid){
continue;
}
CheckValue<IkReal> x516 = IKatan2WithCheck(IkReal(((-1.7316)+(((1.728)*sj2))+(pz*pz)+(((-0.315)*cj2))+(((0.890975)*x507))+(((0.336)*x513)))),((0.168)+(((-1.0)*x511*x514))+(((0.890975)*x513))+(((-0.1575)*sj2))+(((-0.336)*x507))+x512+(((-1.0)*x508*x514))+(((-0.864)*cj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x516.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x515.value)))+(x516.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x517=IKsin(j1);
IkReal x518=IKcos(j1);
IkReal x519=((0.96)*cj2);
IkReal x520=(cj0*px);
IkReal x521=((0.175)*cj2);
IkReal x522=((0.175)*sj2);
IkReal x523=((0.96)*sj2);
IkReal x524=((1.0)*x520);
IkReal x525=(sj2*x518);
IkReal x526=((0.175)*x518);
IkReal x527=((1.0)*py*sj0);
IkReal x528=(pz*x518);
IkReal x529=(py*sj0*x517);
evalcond[0]=((-0.9)+(((-1.0)*x521))+((x517*x520))+(((-0.175)*x517))+x523+x528+x529);
evalcond[1]=(((pz*x517))+(((-1.0)*x518*x527))+(((-1.0)*x518*x524))+x522+x526+x519);
evalcond[2]=((((-0.9)*x518))+((x517*x522))+((x518*x523))+((x517*x519))+(((-1.0)*x518*x521))+pz);
evalcond[3]=((0.1116)+(((0.35)*py*sj0))+(((1.8)*x528))+(((1.8)*x529))+(((1.8)*x517*x520))+(((0.35)*x520))+(((-1.0)*pp))+(((-0.315)*x517)));
evalcond[4]=((0.175)+(((-1.0)*x524))+(((-1.0)*x527))+((x517*x521))+((x518*x522))+(((-1.0)*x517*x523))+((x518*x519))+(((0.9)*x517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x530=cj2*cj2;
IkReal x531=(cj2*sj2);
IkReal x532=(py*sj0);
IkReal x533=(cj0*px);
IkReal x534=((0.96)*cj2);
IkReal x535=((0.175)*pz);
IkReal x536=((0.175)*sj2);
CheckValue<IkReal> x537=IKPowWithIntegerCheck(IKsign(((((-1.0)*x532*x534))+(((-1.0)*x532*x536))+(((-1.0)*x533*x536))+(((-1.0)*x533*x534))+(((0.9)*pz))+((cj2*x535))+(((-0.96)*pz*sj2))+(((0.168)*cj2))+(((0.030625)*sj2)))),-1);
if(!x537.valid){
continue;
}
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(((0.168)+((pz*x532))+((pz*x533))+(((-0.336)*x530))+(((-0.1575)*sj2))+(((-1.0)*x535))+(((0.890975)*x531))+(((-0.864)*cj2)))),((-0.030625)+(((-0.890975)*x530))+(((-0.336)*x531))+(pz*pz)),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x537.value)))+(x538.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x539=IKsin(j1);
IkReal x540=IKcos(j1);
IkReal x541=((0.96)*cj2);
IkReal x542=(cj0*px);
IkReal x543=((0.175)*cj2);
IkReal x544=((0.175)*sj2);
IkReal x545=((0.96)*sj2);
IkReal x546=((1.0)*x542);
IkReal x547=(sj2*x540);
IkReal x548=((0.175)*x540);
IkReal x549=((1.0)*py*sj0);
IkReal x550=(pz*x540);
IkReal x551=(py*sj0*x539);
evalcond[0]=((-0.9)+((x539*x542))+(((-1.0)*x543))+x551+x550+x545+(((-0.175)*x539)));
evalcond[1]=(((pz*x539))+(((-1.0)*x540*x546))+(((-1.0)*x540*x549))+x544+x541+x548);
evalcond[2]=(((x539*x544))+((x539*x541))+((x540*x545))+(((-1.0)*x540*x543))+(((-0.9)*x540))+pz);
evalcond[3]=((0.1116)+(((1.8)*x551))+(((1.8)*x550))+(((0.35)*py*sj0))+(((-1.0)*pp))+(((-0.315)*x539))+(((0.35)*x542))+(((1.8)*x539*x542)));
evalcond[4]=((0.175)+((x539*x543))+(((-1.0)*x539*x545))+((x540*x541))+((x540*x544))+(((-1.0)*x546))+(((-1.0)*x549))+(((0.9)*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x110=(cj0*r00);
IkReal x111=(cj0*r01);
IkReal x112=(sj1*sj2);
IkReal x113=((1.0)*sj0);
IkReal x114=(r10*sj0);
IkReal x115=((1.0)*cj2);
IkReal x116=(r11*sj0);
IkReal x117=(cj0*r02);
IkReal x118=(r12*sj0);
IkReal x119=((((-1.0)*cj1*x115))+x112);
IkReal x120=(((cj1*cj2))+(((-1.0)*x112)));
IkReal x121=(cj0*x120);
IkReal x122=((((-1.0)*sj1*x115))+(((-1.0)*cj1*sj2)));
IkReal x123=(sj0*x122);
new_r00=(((x114*x122))+((r20*x119))+((x110*x122)));
new_r01=(((x111*x122))+((r21*x119))+((x116*x122)));
new_r02=(((x117*x122))+((r22*x119))+((x118*x122)));
new_r10=((((-1.0)*r00*x113))+((cj0*r10)));
new_r11=((((-1.0)*r01*x113))+((cj0*r11)));
new_r12=((((-1.0)*r02*x113))+((cj0*r12)));
new_r20=(((x114*x120))+((r20*x122))+((x110*x120)));
new_r21=(((x111*x120))+((r21*x122))+((x116*x120)));
new_r22=(((x117*x120))+((r22*x122))+((x118*x120)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x124=(cj0*r00);
IkReal x125=(cj0*r01);
IkReal x126=(sj1*sj2);
IkReal x127=((1.0)*sj0);
IkReal x128=(r10*sj0);
IkReal x129=((1.0)*cj2);
IkReal x130=(r11*sj0);
IkReal x131=(cj0*r02);
IkReal x132=(r12*sj0);
IkReal x133=(x126+(((-1.0)*cj1*x129)));
IkReal x134=x120;
IkReal x135=(cj0*x134);
IkReal x136=x122;
IkReal x137=(sj0*x136);
new_r00=(((x124*x136))+((r20*x133))+((x128*x136)));
new_r01=(((r21*x133))+((x125*x136))+((x130*x136)));
new_r02=(((r22*x133))+((x131*x136))+((x132*x136)));
new_r10=((((-1.0)*r00*x127))+((cj0*r10)));
new_r11=(((cj0*r11))+(((-1.0)*r01*x127)));
new_r12=((((-1.0)*r02*x127))+((cj0*r12)));
new_r20=(((x124*x134))+((r20*x136))+((x128*x134)));
new_r21=(((r21*x136))+((x125*x134))+((x130*x134)));
new_r22=(((r22*x136))+((x131*x134))+((x132*x134)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x138=(cj0*r00);
IkReal x139=(cj0*r01);
IkReal x140=(sj1*sj2);
IkReal x141=((1.0)*sj0);
IkReal x142=(r10*sj0);
IkReal x143=((1.0)*cj2);
IkReal x144=(r11*sj0);
IkReal x145=(cj0*r02);
IkReal x146=(r12*sj0);
IkReal x147=(x140+(((-1.0)*cj1*x143)));
IkReal x148=x120;
IkReal x149=(cj0*x148);
IkReal x150=x122;
IkReal x151=(sj0*x150);
new_r00=(((x142*x150))+((r20*x147))+((x138*x150)));
new_r01=(((x139*x150))+((x144*x150))+((r21*x147)));
new_r02=(((x145*x150))+((x146*x150))+((r22*x147)));
new_r10=((((-1.0)*r00*x141))+((cj0*r10)));
new_r11=((((-1.0)*r01*x141))+((cj0*r11)));
new_r12=((((-1.0)*r02*x141))+((cj0*r12)));
new_r20=(((x142*x148))+((r20*x150))+((x138*x148)));
new_r21=(((x144*x148))+((r21*x150))+((x139*x148)));
new_r22=(((x145*x148))+((x146*x148))+((r22*x150)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x153 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x153.valid){
continue;
}
IkReal x152=x153.value;
j3array[0]=((-1.0)*x152);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x152)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x154=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x154))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x154))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x154))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x154))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x154))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x154))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x155=IKsin(j5);
IkReal x156=IKcos(j5);
IkReal x157=((1.0)*sj3);
IkReal x158=((1.0)*x156);
IkReal x159=(sj3*x155);
IkReal x160=((1.0)*x155);
IkReal x161=(cj3*x158);
evalcond[0]=(((new_r11*sj3))+x155+((cj3*new_r01)));
evalcond[1]=(((cj3*x155))+new_r01+((sj3*x156)));
evalcond[2]=((((-1.0)*x158))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[3]=((((-1.0)*x160))+((cj3*new_r10))+(((-1.0)*new_r00*x157)));
evalcond[4]=((((-1.0)*x158))+((cj3*new_r11))+(((-1.0)*new_r01*x157)));
evalcond[5]=((((-1.0)*x161))+x159+new_r00);
evalcond[6]=((((-1.0)*x161))+x159+new_r11);
evalcond[7]=((((-1.0)*x156*x157))+(((-1.0)*cj3*x160))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
IkReal x162=x163.value;
j3array[0]=((-1.0)*x162);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x162)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x164=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x164))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x164))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x164))+((cj3*new_r01))), ((((-1.0)*cj3*new_r00))+(((-1.0)*new_r01*x164))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x165=IKsin(j5);
IkReal x166=IKcos(j5);
IkReal x167=((1.0)*sj3);
IkReal x168=((1.0)*x165);
IkReal x169=(sj3*x166);
IkReal x170=((1.0)*x166);
IkReal x171=(cj3*x168);
evalcond[0]=(((new_r10*sj3))+x166+((cj3*new_r00)));
evalcond[1]=((((-1.0)*x168))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(((sj3*x165))+((cj3*x166))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x167))+(((-1.0)*x168))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x170))+((cj3*new_r11))+(((-1.0)*new_r01*x167)));
evalcond[5]=((((-1.0)*x171))+x169+new_r01);
evalcond[6]=((((-1.0)*x171))+x169+new_r10);
evalcond[7]=((((-1.0)*cj3*x170))+new_r11+(((-1.0)*x165*x167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x173=IKPowWithIntegerCheck(sj4,-1);
if(!x173.valid){
continue;
}
IkReal x172=x173.value;
CheckValue<IkReal> x174=IKPowWithIntegerCheck(new_r12,-1);
if(!x174.valid){
continue;
}
if( IKabs((x172*(x174.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x172)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x172*(x174.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))))+IKsqr((new_r02*x172))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x172*(x174.value)*(((1.0)+(((-1.0)*(cj4*cj4)))+(((-1.0)*(new_r02*new_r02)))))), (new_r02*x172));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x175=IKcos(j3);
IkReal x176=IKsin(j3);
IkReal x177=((1.0)*sj4);
IkReal x178=(sj4*x176);
IkReal x179=(sj4*x175);
IkReal x180=(new_r02*x175);
IkReal x181=(new_r12*x176);
evalcond[0]=((((-1.0)*x175*x177))+new_r02);
evalcond[1]=((((-1.0)*x176*x177))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x176))+((new_r12*x175)));
evalcond[3]=((((-1.0)*x177))+x180+x181);
evalcond[4]=(((new_r00*x179))+((new_r10*x178))+((cj4*new_r20)));
evalcond[5]=(((new_r01*x179))+((new_r11*x178))+((cj4*new_r21)));
evalcond[6]=((-1.0)+((new_r02*x179))+((cj4*new_r22))+((new_r12*x178)));
evalcond[7]=((((-1.0)*new_r22*x177))+((cj4*x181))+((cj4*x180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x182=(cj0*r00);
IkReal x183=(cj0*r01);
IkReal x184=(sj1*sj2);
IkReal x185=((1.0)*sj0);
IkReal x186=(r10*sj0);
IkReal x187=((1.0)*cj2);
IkReal x188=(r11*sj0);
IkReal x189=(cj0*r02);
IkReal x190=(r12*sj0);
IkReal x191=(x184+(((-1.0)*cj1*x187)));
IkReal x192=x120;
IkReal x193=(cj0*x192);
IkReal x194=x122;
IkReal x195=(sj0*x194);
new_r00=(((x186*x194))+((r20*x191))+((x182*x194)));
new_r01=(((x188*x194))+((r21*x191))+((x183*x194)));
new_r02=(((x189*x194))+((x190*x194))+((r22*x191)));
new_r10=((((-1.0)*r00*x185))+((cj0*r10)));
new_r11=((((-1.0)*r01*x185))+((cj0*r11)));
new_r12=((((-1.0)*r02*x185))+((cj0*r12)));
new_r20=(((x186*x192))+((r20*x194))+((x182*x192)));
new_r21=(((x188*x192))+((r21*x194))+((x183*x192)));
new_r22=(((x189*x192))+((x190*x192))+((r22*x194)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x196=(cj0*r00);
IkReal x197=(cj0*r01);
IkReal x198=(sj1*sj2);
IkReal x199=((1.0)*sj0);
IkReal x200=(r10*sj0);
IkReal x201=((1.0)*cj2);
IkReal x202=(r11*sj0);
IkReal x203=(cj0*r02);
IkReal x204=(r12*sj0);
IkReal x205=((((-1.0)*cj1*x201))+x198);
IkReal x206=x120;
IkReal x207=(cj0*x206);
IkReal x208=x122;
IkReal x209=(sj0*x208);
new_r00=(((x196*x208))+((x200*x208))+((r20*x205)));
new_r01=(((x197*x208))+((x202*x208))+((r21*x205)));
new_r02=(((r22*x205))+((x204*x208))+((x203*x208)));
new_r10=((((-1.0)*r00*x199))+((cj0*r10)));
new_r11=((((-1.0)*r01*x199))+((cj0*r11)));
new_r12=((((-1.0)*r02*x199))+((cj0*r12)));
new_r20=(((x196*x206))+((x200*x206))+((r20*x208)));
new_r21=(((x197*x206))+((x202*x206))+((r21*x208)));
new_r22=(((r22*x208))+((x204*x206))+((x203*x206)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x210=(cj0*r00);
IkReal x211=(cj0*r01);
IkReal x212=(sj1*sj2);
IkReal x213=((1.0)*sj0);
IkReal x214=(r10*sj0);
IkReal x215=((1.0)*cj2);
IkReal x216=(r11*sj0);
IkReal x217=(cj0*r02);
IkReal x218=(r12*sj0);
IkReal x219=((((-1.0)*cj1*x215))+x212);
IkReal x220=x120;
IkReal x221=(cj0*x220);
IkReal x222=x122;
IkReal x223=(sj0*x222);
new_r00=(((x210*x222))+((x214*x222))+((r20*x219)));
new_r01=(((r21*x219))+((x216*x222))+((x211*x222)));
new_r02=(((x218*x222))+((r22*x219))+((x217*x222)));
new_r10=((((-1.0)*r00*x213))+((cj0*r10)));
new_r11=((((-1.0)*r01*x213))+((cj0*r11)));
new_r12=((((-1.0)*r02*x213))+((cj0*r12)));
new_r20=(((x210*x220))+((r20*x222))+((x214*x220)));
new_r21=(((x216*x220))+((r21*x222))+((x211*x220)));
new_r22=(((x218*x220))+((x217*x220))+((r22*x222)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x224=(new_r22+(((-1.0)*cj4)));
IkReal x225=((((-1.0)*sj4))+new_r12);
IkReal x226=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x224;
evalcond[2]=x224;
evalcond[3]=new_r02;
evalcond[4]=x225;
evalcond[5]=x225;
evalcond[6]=(((new_r10*sj4))+((cj4*new_r20)));
evalcond[7]=(((new_r11*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r12*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r12))+(((-1.0)*new_r22*x226)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x227 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x227.valid){
continue;
}
CheckValue<IkReal> x228=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x228.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x227.value)+(((1.5707963267949)*(x228.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x229=IKsin(j5);
IkReal x230=IKcos(j5);
IkReal x231=((1.0)*new_r12);
IkReal x232=((1.0)*x230);
IkReal x233=((1.0)*x229);
evalcond[0]=(((new_r12*x230))+new_r20);
evalcond[1]=(((new_r22*x229))+new_r11);
evalcond[2]=(new_r21+(((-1.0)*x229*x231)));
evalcond[3]=((((-1.0)*new_r22*x232))+new_r10);
evalcond[4]=((((-1.0)*x233))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x232))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x231))+x229+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*new_r20*x231))+(((-1.0)*x232))+((new_r10*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x234=(new_r22+(((-1.0)*cj4)));
IkReal x235=((1.0)*cj4);
IkReal x236=((1.0)*new_r12);
IkReal x237=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x234;
evalcond[2]=x234;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*x237))+(((-1.0)*x236)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r10*x237)));
evalcond[7]=(((cj4*new_r21))+(((-1.0)*new_r11*x237)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x236))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x237))+(((-1.0)*new_r12*x235)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x238=IKsin(j5);
IkReal x239=IKcos(j5);
IkReal x240=((1.0)*new_r11);
IkReal x241=((1.0)*new_r10);
IkReal x242=((1.0)*x239);
evalcond[0]=(((new_r12*x238))+new_r21);
evalcond[1]=(new_r00+(((-1.0)*x238)));
evalcond[2]=((((-1.0)*x242))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x242))+new_r20);
evalcond[4]=(((new_r22*x238))+(((-1.0)*x240)));
evalcond[5]=((((-1.0)*new_r22*x242))+(((-1.0)*x241)));
evalcond[6]=((((-1.0)*new_r22*x240))+((new_r12*new_r21))+x238);
evalcond[7]=((((-1.0)*new_r22*x241))+((new_r12*new_r20))+(((-1.0)*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x243=((1.0)*sj3);
IkReal x244=(((cj3*new_r12))+(((-1.0)*new_r02*x243)));
IkReal x245=(((new_r10*sj3))+((cj3*new_r00)));
IkReal x246=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x247=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*cj3)));
evalcond[3]=((((-1.0)*x243))+new_r12);
evalcond[4]=x244;
evalcond[5]=x244;
evalcond[6]=x247;
evalcond[7]=x246;
evalcond[8]=x245;
evalcond[9]=x245;
evalcond[10]=x246;
evalcond[11]=x247;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x248=IKcos(j5);
IkReal x249=IKsin(j5);
IkReal x250=((1.0)*new_r12);
IkReal x251=((1.0)*x249);
IkReal x252=((1.0)*x248);
evalcond[0]=(x248+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x251)));
evalcond[2]=(((new_r12*x248))+new_r01);
evalcond[3]=(((new_r12*x249))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*new_r02*x252)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x251)));
evalcond[6]=(((new_r02*new_r10))+(((-1.0)*new_r00*x250))+(((-1.0)*x251)));
evalcond[7]=((((-1.0)*new_r01*x250))+((new_r02*new_r11))+(((-1.0)*x252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x253=(new_r12*sj3);
IkReal x254=(new_r11*sj3);
IkReal x255=((1.0)*cj3);
IkReal x256=((1.0)*sj3);
IkReal x257=(((cj3*new_r12))+(((-1.0)*new_r02*x256)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x257;
evalcond[5]=x257;
evalcond[6]=((1.0)+x253+((cj3*new_r02)));
evalcond[7]=(x254+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r10*x256))+(((-1.0)*new_r00*x255)));
evalcond[10]=((((-1.0)*new_r01*x255))+(((-1.0)*x254)));
evalcond[11]=((-1.0)+(((-1.0)*new_r02*x255))+(((-1.0)*x253)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x258=IKcos(j5);
IkReal x259=IKsin(j5);
IkReal x260=((1.0)*new_r02);
IkReal x261=((1.0)*x258);
IkReal x262=((1.0)*x259);
evalcond[0]=(x259+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x261)));
evalcond[2]=(((new_r02*x258))+new_r11);
evalcond[3]=(((new_r02*x259))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x261))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x262))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x260))+(((-1.0)*x262)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x260))+(((-1.0)*x261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x263=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x264=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x263;
evalcond[7]=x263;
evalcond[8]=x264;
evalcond[9]=x264;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x265=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x265))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x265))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x265))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x265))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x265))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x265))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x266=IKsin(j5);
IkReal x267=IKcos(j5);
IkReal x268=((1.0)*sj3);
IkReal x269=((1.0)*x267);
IkReal x270=(sj3*x266);
IkReal x271=((1.0)*x266);
IkReal x272=(cj3*x269);
evalcond[0]=(((new_r11*sj3))+x266+((cj3*new_r01)));
evalcond[1]=(((sj3*x267))+new_r01+((cj3*x266)));
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*x269)));
evalcond[3]=((((-1.0)*new_r00*x268))+((cj3*new_r10))+(((-1.0)*x271)));
evalcond[4]=((((-1.0)*new_r01*x268))+((cj3*new_r11))+(((-1.0)*x269)));
evalcond[5]=(x270+(((-1.0)*x272))+new_r00);
evalcond[6]=(x270+(((-1.0)*x272))+new_r11);
evalcond[7]=((((-1.0)*cj3*x271))+(((-1.0)*x267*x268))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x273=(new_r12*sj3);
IkReal x274=((1.0)*new_r02);
IkReal x275=((((-1.0)*sj3*x274))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x275;
evalcond[7]=x275;
evalcond[8]=(x273+((cj3*new_r02)));
evalcond[9]=((((-1.0)*x273))+(((-1.0)*cj3*x274)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x276=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x276))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x276))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x276))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x276))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x276))+((cj3*new_r01))), ((((-1.0)*new_r01*x276))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x277=IKsin(j5);
IkReal x278=IKcos(j5);
IkReal x279=((1.0)*sj3);
IkReal x280=((1.0)*x277);
IkReal x281=(sj3*x278);
IkReal x282=((1.0)*x278);
IkReal x283=(cj3*x280);
evalcond[0]=(((new_r10*sj3))+x278+((cj3*new_r00)));
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x280)));
evalcond[2]=(((sj3*x277))+new_r00+((cj3*x278)));
evalcond[3]=((((-1.0)*new_r00*x279))+((cj3*new_r10))+(((-1.0)*x280)));
evalcond[4]=((((-1.0)*new_r01*x279))+((cj3*new_r11))+(((-1.0)*x282)));
evalcond[5]=(x281+(((-1.0)*x283))+new_r01);
evalcond[6]=(x281+(((-1.0)*x283))+new_r10);
evalcond[7]=((((-1.0)*x277*x279))+(((-1.0)*cj3*x282))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x284=(new_r22+(((-1.0)*cj4)));
IkReal x285=((((-1.0)*sj4))+new_r02);
IkReal x286=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x284;
evalcond[2]=x284;
evalcond[3]=x285;
evalcond[4]=new_r12;
evalcond[5]=x285;
evalcond[6]=(((cj4*new_r20))+((new_r00*sj4)));
evalcond[7]=(((new_r01*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r02*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r02))+(((-1.0)*new_r22*x286)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x287=IKcos(j5);
IkReal x288=IKsin(j5);
IkReal x289=((1.0)*new_r02);
IkReal x290=((1.0)*x287);
evalcond[0]=(((new_r02*x287))+new_r20);
evalcond[1]=((((-1.0)*x288))+new_r10);
evalcond[2]=((((-1.0)*x290))+new_r11);
evalcond[3]=(new_r01+((new_r22*x288)));
evalcond[4]=((((-1.0)*x288*x289))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x290)));
evalcond[6]=(((new_r01*new_r22))+x288+(((-1.0)*new_r21*x289)));
evalcond[7]=(((new_r00*new_r22))+(((-1.0)*x290))+(((-1.0)*new_r20*x289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x291=(new_r22+(((-1.0)*cj4)));
IkReal x292=((1.0)*cj4);
IkReal x293=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x291;
evalcond[2]=x291;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x293))+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r00*x293)));
evalcond[7]=((((-1.0)*new_r01*x293))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((cj4*new_r22))+(((-1.0)*new_r02*x293)));
evalcond[9]=((((-1.0)*new_r22*x293))+(((-1.0)*new_r02*x292)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x295.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x294.value)+(((1.5707963267949)*(x295.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x296=IKsin(j5);
IkReal x297=IKcos(j5);
IkReal x298=((1.0)*new_r00);
IkReal x299=((1.0)*new_r01);
IkReal x300=((1.0)*x297);
evalcond[0]=(((new_r02*x296))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x300))+new_r20);
evalcond[2]=((((-1.0)*x296))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x300)));
evalcond[4]=((((-1.0)*x299))+((new_r22*x296)));
evalcond[5]=((((-1.0)*new_r22*x300))+(((-1.0)*x298)));
evalcond[6]=(x296+((new_r02*new_r21))+(((-1.0)*new_r22*x299)));
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*new_r22*x298))+(((-1.0)*x300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x302=IKPowWithIntegerCheck(sj4,-1);
if(!x302.valid){
continue;
}
IkReal x301=x302.value;
CheckValue<IkReal> x303=IKPowWithIntegerCheck(cj3,-1);
if(!x303.valid){
continue;
}
CheckValue<IkReal> x304=IKPowWithIntegerCheck(cj4,-1);
if(!x304.valid){
continue;
}
if( IKabs((x301*(x303.value)*(x304.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x301)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x301*(x303.value)*(x304.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x301))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x301*(x303.value)*(x304.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x301));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x305=IKsin(j5);
IkReal x306=IKcos(j5);
IkReal x307=(cj3*new_r00);
IkReal x308=(cj3*cj4);
IkReal x309=(cj4*sj3);
IkReal x310=((1.0)*sj3);
IkReal x311=((1.0)*sj4);
IkReal x312=((1.0)*x306);
IkReal x313=(sj3*x305);
IkReal x314=((1.0)*x305);
evalcond[0]=(((sj4*x306))+new_r20);
evalcond[1]=((((-1.0)*x305*x311))+new_r21);
evalcond[2]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x305)));
evalcond[3]=((((-1.0)*new_r00*x310))+(((-1.0)*x314))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x312))+((cj3*new_r11))+(((-1.0)*new_r01*x310)));
evalcond[5]=(((sj3*x306))+((x305*x308))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x312))+x307);
evalcond[7]=((((-1.0)*x308*x312))+x313+new_r00);
evalcond[8]=(((x305*x309))+new_r11+(((-1.0)*cj3*x312)));
evalcond[9]=(new_r10+(((-1.0)*x309*x312))+(((-1.0)*cj3*x314)));
evalcond[10]=((((-1.0)*new_r21*x311))+((new_r01*x308))+((new_r11*x309))+x305);
evalcond[11]=((((-1.0)*new_r20*x311))+((new_r10*x309))+(((-1.0)*x312))+((cj4*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x316=IKPowWithIntegerCheck(sj4,-1);
if(!x316.valid){
continue;
}
IkReal x315=x316.value;
CheckValue<IkReal> x317=IKPowWithIntegerCheck(sj3,-1);
if(!x317.valid){
continue;
}
if( IKabs((x315*(x317.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x315)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x315*(x317.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x315))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x315*(x317.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x315));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x318=IKsin(j5);
IkReal x319=IKcos(j5);
IkReal x320=(cj3*new_r00);
IkReal x321=(cj3*cj4);
IkReal x322=(cj4*sj3);
IkReal x323=((1.0)*sj3);
IkReal x324=((1.0)*sj4);
IkReal x325=((1.0)*x319);
IkReal x326=(sj3*x318);
IkReal x327=((1.0)*x318);
evalcond[0]=(((sj4*x319))+new_r20);
evalcond[1]=((((-1.0)*x318*x324))+new_r21);
evalcond[2]=(((cj4*x318))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*x327))+(((-1.0)*new_r00*x323))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x325))+(((-1.0)*new_r01*x323))+((cj3*new_r11)));
evalcond[5]=(((x318*x321))+new_r01+((sj3*x319)));
evalcond[6]=(((new_r10*sj3))+x320+(((-1.0)*cj4*x325)));
evalcond[7]=((((-1.0)*x321*x325))+x326+new_r00);
evalcond[8]=(((x318*x322))+(((-1.0)*cj3*x325))+new_r11);
evalcond[9]=((((-1.0)*cj3*x327))+(((-1.0)*x322*x325))+new_r10);
evalcond[10]=(((new_r01*x321))+x318+(((-1.0)*new_r21*x324))+((new_r11*x322)));
evalcond[11]=((((-1.0)*x325))+((cj4*x320))+((new_r10*x322))+(((-1.0)*new_r20*x324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x328=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x328.valid){
continue;
}
CheckValue<IkReal> x329 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x329.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x328.value)))+(x329.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x330=IKsin(j5);
IkReal x331=IKcos(j5);
IkReal x332=(cj3*new_r00);
IkReal x333=(cj3*cj4);
IkReal x334=(cj4*sj3);
IkReal x335=((1.0)*sj3);
IkReal x336=((1.0)*sj4);
IkReal x337=((1.0)*x331);
IkReal x338=(sj3*x330);
IkReal x339=((1.0)*x330);
evalcond[0]=(((sj4*x331))+new_r20);
evalcond[1]=((((-1.0)*x330*x336))+new_r21);
evalcond[2]=(((new_r11*sj3))+((cj4*x330))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x335))+((cj3*new_r10))+(((-1.0)*x339)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x337))+(((-1.0)*new_r01*x335)));
evalcond[5]=(((x330*x333))+((sj3*x331))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x337))+x332);
evalcond[7]=((((-1.0)*x333*x337))+x338+new_r00);
evalcond[8]=(((x330*x334))+new_r11+(((-1.0)*cj3*x337)));
evalcond[9]=(new_r10+(((-1.0)*x334*x337))+(((-1.0)*cj3*x339)));
evalcond[10]=(((new_r01*x333))+((new_r11*x334))+(((-1.0)*new_r21*x336))+x330);
evalcond[11]=((((-1.0)*new_r20*x336))+((new_r10*x334))+(((-1.0)*x337))+((cj4*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x340=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x340.valid){
continue;
}
CheckValue<IkReal> x341 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x341.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x340.value)))+(x341.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x342=IKcos(j3);
IkReal x343=IKsin(j3);
IkReal x344=((1.0)*sj4);
IkReal x345=(sj4*x343);
IkReal x346=(sj4*x342);
IkReal x347=(new_r02*x342);
IkReal x348=(new_r12*x343);
evalcond[0]=(new_r02+(((-1.0)*x342*x344)));
evalcond[1]=((((-1.0)*x343*x344))+new_r12);
evalcond[2]=(((new_r12*x342))+(((-1.0)*new_r02*x343)));
evalcond[3]=(x347+x348+(((-1.0)*x344)));
evalcond[4]=(((cj4*new_r20))+((new_r00*x346))+((new_r10*x345)));
evalcond[5]=(((new_r11*x345))+((cj4*new_r21))+((new_r01*x346)));
evalcond[6]=((-1.0)+((new_r02*x346))+((new_r12*x345))+((cj4*new_r22)));
evalcond[7]=(((cj4*x348))+((cj4*x347))+(((-1.0)*new_r22*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x349=(cj0*r00);
IkReal x350=(cj0*r01);
IkReal x351=(sj1*sj2);
IkReal x352=((1.0)*sj0);
IkReal x353=(r10*sj0);
IkReal x354=((1.0)*cj2);
IkReal x355=(r11*sj0);
IkReal x356=(cj0*r02);
IkReal x357=(r12*sj0);
IkReal x358=((((-1.0)*cj1*x354))+x351);
IkReal x359=x120;
IkReal x360=(cj0*x359);
IkReal x361=x122;
IkReal x362=(sj0*x361);
new_r00=(((x353*x361))+((x349*x361))+((r20*x358)));
new_r01=(((r21*x358))+((x350*x361))+((x355*x361)));
new_r02=(((x356*x361))+((r22*x358))+((x357*x361)));
new_r10=((((-1.0)*r00*x352))+((cj0*r10)));
new_r11=((((-1.0)*r01*x352))+((cj0*r11)));
new_r12=((((-1.0)*r02*x352))+((cj0*r12)));
new_r20=(((r20*x361))+((x353*x359))+((x349*x359)));
new_r21=(((x355*x359))+((r21*x361))+((x350*x359)));
new_r22=(((x356*x359))+((r22*x361))+((x357*x359)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x363=(cj0*r00);
IkReal x364=(cj0*r01);
IkReal x365=(sj1*sj2);
IkReal x366=((1.0)*sj0);
IkReal x367=(r10*sj0);
IkReal x368=((1.0)*cj2);
IkReal x369=(r11*sj0);
IkReal x370=(cj0*r02);
IkReal x371=(r12*sj0);
IkReal x372=((((-1.0)*cj1*x368))+x365);
IkReal x373=x120;
IkReal x374=(cj0*x373);
IkReal x375=x122;
IkReal x376=(sj0*x375);
new_r00=(((x367*x375))+((r20*x372))+((x363*x375)));
new_r01=(((x369*x375))+((x364*x375))+((r21*x372)));
new_r02=(((x370*x375))+((r22*x372))+((x371*x375)));
new_r10=((((-1.0)*r00*x366))+((cj0*r10)));
new_r11=((((-1.0)*r01*x366))+((cj0*r11)));
new_r12=((((-1.0)*r02*x366))+((cj0*r12)));
new_r20=(((x367*x373))+((r20*x375))+((x363*x373)));
new_r21=(((x369*x373))+((x364*x373))+((r21*x375)));
new_r22=(((x370*x373))+((r22*x375))+((x371*x373)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x377=(cj0*r00);
IkReal x378=(cj0*r01);
IkReal x379=(sj1*sj2);
IkReal x380=((1.0)*sj0);
IkReal x381=(r10*sj0);
IkReal x382=((1.0)*cj2);
IkReal x383=(r11*sj0);
IkReal x384=(cj0*r02);
IkReal x385=(r12*sj0);
IkReal x386=((((-1.0)*cj1*x382))+x379);
IkReal x387=x120;
IkReal x388=(cj0*x387);
IkReal x389=x122;
IkReal x390=(sj0*x389);
new_r00=(((x377*x389))+((r20*x386))+((x381*x389)));
new_r01=(((x378*x389))+((r21*x386))+((x383*x389)));
new_r02=(((r22*x386))+((x384*x389))+((x385*x389)));
new_r10=((((-1.0)*r00*x380))+((cj0*r10)));
new_r11=((((-1.0)*r01*x380))+((cj0*r11)));
new_r12=((((-1.0)*r02*x380))+((cj0*r12)));
new_r20=(((x377*x387))+((r20*x389))+((x381*x387)));
new_r21=(((x378*x387))+((r21*x389))+((x383*x387)));
new_r22=(((r22*x389))+((x384*x387))+((x385*x387)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x391=(new_r22+(((-1.0)*cj4)));
IkReal x392=((((-1.0)*sj4))+new_r12);
IkReal x393=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x391;
evalcond[2]=x391;
evalcond[3]=new_r02;
evalcond[4]=x392;
evalcond[5]=x392;
evalcond[6]=(((new_r10*sj4))+((cj4*new_r20)));
evalcond[7]=(((new_r11*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r12*sj4))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x393))+((cj4*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x394 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x394.valid){
continue;
}
CheckValue<IkReal> x395=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x395.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x394.value)+(((1.5707963267949)*(x395.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x396=IKsin(j5);
IkReal x397=IKcos(j5);
IkReal x398=((1.0)*new_r12);
IkReal x399=((1.0)*x397);
IkReal x400=((1.0)*x396);
evalcond[0]=(new_r20+((new_r12*x397)));
evalcond[1]=(new_r11+((new_r22*x396)));
evalcond[2]=((((-1.0)*x396*x398))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x399))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x400)));
evalcond[5]=((((-1.0)*x399))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x398))+x396+((new_r11*new_r22)));
evalcond[7]=((((-1.0)*x399))+((new_r10*new_r22))+(((-1.0)*new_r20*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x401=(new_r22+(((-1.0)*cj4)));
IkReal x402=((1.0)*cj4);
IkReal x403=((1.0)*new_r12);
IkReal x404=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x401;
evalcond[2]=x401;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*x404))+(((-1.0)*x403)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r10*x404)));
evalcond[7]=(((cj4*new_r21))+(((-1.0)*new_r11*x404)));
evalcond[8]=((-1.0)+((cj4*new_r22))+(((-1.0)*sj4*x403)));
evalcond[9]=((((-1.0)*new_r12*x402))+(((-1.0)*new_r22*x404)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x405=IKsin(j5);
IkReal x406=IKcos(j5);
IkReal x407=((1.0)*new_r11);
IkReal x408=((1.0)*new_r10);
IkReal x409=((1.0)*x406);
evalcond[0]=(((new_r12*x405))+new_r21);
evalcond[1]=(new_r00+(((-1.0)*x405)));
evalcond[2]=(new_r01+(((-1.0)*x409)));
evalcond[3]=((((-1.0)*new_r12*x409))+new_r20);
evalcond[4]=(((new_r22*x405))+(((-1.0)*x407)));
evalcond[5]=((((-1.0)*new_r22*x409))+(((-1.0)*x408)));
evalcond[6]=(((new_r12*new_r21))+x405+(((-1.0)*new_r22*x407)));
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r22*x408))+(((-1.0)*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x410=((1.0)*sj3);
IkReal x411=(((cj3*new_r12))+(((-1.0)*new_r02*x410)));
IkReal x412=(((new_r10*sj3))+((cj3*new_r00)));
IkReal x413=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x414=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(new_r02+(((-1.0)*cj3)));
evalcond[3]=(new_r12+(((-1.0)*x410)));
evalcond[4]=x411;
evalcond[5]=x411;
evalcond[6]=x414;
evalcond[7]=x413;
evalcond[8]=x412;
evalcond[9]=x412;
evalcond[10]=x413;
evalcond[11]=x414;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x415=IKcos(j5);
IkReal x416=IKsin(j5);
IkReal x417=((1.0)*new_r12);
IkReal x418=((1.0)*x416);
IkReal x419=((1.0)*x415);
evalcond[0]=(x415+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x418)));
evalcond[2]=(((new_r12*x415))+new_r01);
evalcond[3]=(((new_r12*x416))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*new_r02*x419)));
evalcond[5]=(new_r10+(((-1.0)*new_r02*x418)));
evalcond[6]=(((new_r02*new_r10))+(((-1.0)*new_r00*x417))+(((-1.0)*x418)));
evalcond[7]=(((new_r02*new_r11))+(((-1.0)*x419))+(((-1.0)*new_r01*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x420=(new_r12*sj3);
IkReal x421=(new_r11*sj3);
IkReal x422=((1.0)*cj3);
IkReal x423=((1.0)*sj3);
IkReal x424=(((cj3*new_r12))+(((-1.0)*new_r02*x423)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x424;
evalcond[5]=x424;
evalcond[6]=((1.0)+x420+((cj3*new_r02)));
evalcond[7]=(x421+((cj3*new_r01)));
evalcond[8]=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[9]=((((-1.0)*new_r00*x422))+(((-1.0)*new_r10*x423)));
evalcond[10]=((((-1.0)*x421))+(((-1.0)*new_r01*x422)));
evalcond[11]=((-1.0)+(((-1.0)*x420))+(((-1.0)*new_r02*x422)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x425=IKcos(j5);
IkReal x426=IKsin(j5);
IkReal x427=((1.0)*new_r02);
IkReal x428=((1.0)*x425);
IkReal x429=((1.0)*x426);
evalcond[0]=(x426+new_r21);
evalcond[1]=((((-1.0)*x428))+new_r20);
evalcond[2]=(new_r11+((new_r02*x425)));
evalcond[3]=(new_r10+((new_r02*x426)));
evalcond[4]=((((-1.0)*new_r12*x428))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x429))+new_r00);
evalcond[6]=((((-1.0)*x429))+((new_r00*new_r12))+(((-1.0)*new_r10*x427)));
evalcond[7]=((((-1.0)*x428))+((new_r01*new_r12))+(((-1.0)*new_r11*x427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x430=((((-1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x431=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x430;
evalcond[7]=x430;
evalcond[8]=x431;
evalcond[9]=x431;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x432=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj3*x432))+(((-1.0)*new_r00*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x432))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x432))+(((-1.0)*new_r00*sj3))))+IKsqr(((((-1.0)*sj3*x432))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x432))+(((-1.0)*new_r00*sj3))), ((((-1.0)*sj3*x432))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x433=IKsin(j5);
IkReal x434=IKcos(j5);
IkReal x435=((1.0)*sj3);
IkReal x436=((1.0)*x434);
IkReal x437=(sj3*x433);
IkReal x438=((1.0)*x433);
IkReal x439=(cj3*x436);
evalcond[0]=(((new_r11*sj3))+x433+((cj3*new_r01)));
evalcond[1]=(((cj3*x433))+((sj3*x434))+new_r01);
evalcond[2]=((((-1.0)*x436))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[3]=((((-1.0)*new_r00*x435))+(((-1.0)*x438))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x436))+(((-1.0)*new_r01*x435))+((cj3*new_r11)));
evalcond[5]=((((-1.0)*x439))+x437+new_r00);
evalcond[6]=((((-1.0)*x439))+x437+new_r11);
evalcond[7]=((((-1.0)*cj3*x438))+(((-1.0)*x434*x435))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x440=(new_r12*sj3);
IkReal x441=((1.0)*new_r02);
IkReal x442=((((-1.0)*sj3*x441))+((cj3*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x442;
evalcond[7]=x442;
evalcond[8]=(x440+((cj3*new_r02)));
evalcond[9]=((((-1.0)*cj3*x441))+(((-1.0)*x440)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x443=((1.0)*sj3);
if( IKabs(((((-1.0)*new_r00*x443))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x443))+(((-1.0)*cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x443))+((cj3*new_r01))))+IKsqr(((((-1.0)*new_r01*x443))+(((-1.0)*cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*new_r00*x443))+((cj3*new_r01))), ((((-1.0)*new_r01*x443))+(((-1.0)*cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x444=IKsin(j5);
IkReal x445=IKcos(j5);
IkReal x446=((1.0)*sj3);
IkReal x447=((1.0)*x444);
IkReal x448=(sj3*x445);
IkReal x449=((1.0)*x445);
IkReal x450=(cj3*x447);
evalcond[0]=(((new_r10*sj3))+x445+((cj3*new_r00)));
evalcond[1]=((((-1.0)*x447))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(((sj3*x444))+((cj3*x445))+new_r00);
evalcond[3]=((((-1.0)*x447))+(((-1.0)*new_r00*x446))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x449))+(((-1.0)*new_r01*x446))+((cj3*new_r11)));
evalcond[5]=((((-1.0)*x450))+x448+new_r01);
evalcond[6]=((((-1.0)*x450))+x448+new_r10);
evalcond[7]=((((-1.0)*x444*x446))+(((-1.0)*cj3*x449))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x451=(new_r22+(((-1.0)*cj4)));
IkReal x452=((((-1.0)*sj4))+new_r02);
IkReal x453=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x451;
evalcond[2]=x451;
evalcond[3]=x452;
evalcond[4]=new_r12;
evalcond[5]=x452;
evalcond[6]=(((cj4*new_r20))+((new_r00*sj4)));
evalcond[7]=(((new_r01*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r02*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r02))+(((-1.0)*new_r22*x453)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x454=IKcos(j5);
IkReal x455=IKsin(j5);
IkReal x456=((1.0)*new_r02);
IkReal x457=((1.0)*x454);
evalcond[0]=(((new_r02*x454))+new_r20);
evalcond[1]=((((-1.0)*x455))+new_r10);
evalcond[2]=((((-1.0)*x457))+new_r11);
evalcond[3]=(((new_r22*x455))+new_r01);
evalcond[4]=((((-1.0)*x455*x456))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x457))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x456))+((new_r01*new_r22))+x455);
evalcond[7]=((((-1.0)*new_r20*x456))+((new_r00*new_r22))+(((-1.0)*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x458=(new_r22+(((-1.0)*cj4)));
IkReal x459=((1.0)*cj4);
IkReal x460=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x458;
evalcond[2]=x458;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x460))+(((-1.0)*new_r02)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r00*x460)));
evalcond[7]=(((cj4*new_r21))+(((-1.0)*new_r01*x460)));
evalcond[8]=((-1.0)+((cj4*new_r22))+(((-1.0)*new_r02*x460)));
evalcond[9]=((((-1.0)*new_r22*x460))+(((-1.0)*new_r02*x459)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x462.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x461.value)+(((1.5707963267949)*(x462.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x463=IKsin(j5);
IkReal x464=IKcos(j5);
IkReal x465=((1.0)*new_r00);
IkReal x466=((1.0)*new_r01);
IkReal x467=((1.0)*x464);
evalcond[0]=(((new_r02*x463))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x467))+new_r20);
evalcond[2]=((((-1.0)*x463))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x467))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x466))+((new_r22*x463)));
evalcond[5]=((((-1.0)*new_r22*x467))+(((-1.0)*x465)));
evalcond[6]=((((-1.0)*new_r22*x466))+x463+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*new_r22*x465))+(((-1.0)*x467))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x469=IKPowWithIntegerCheck(sj4,-1);
if(!x469.valid){
continue;
}
IkReal x468=x469.value;
CheckValue<IkReal> x470=IKPowWithIntegerCheck(cj3,-1);
if(!x470.valid){
continue;
}
CheckValue<IkReal> x471=IKPowWithIntegerCheck(cj4,-1);
if(!x471.valid){
continue;
}
if( IKabs((x468*(x470.value)*(x471.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x468)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x468*(x470.value)*(x471.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))))+IKsqr(((-1.0)*new_r20*x468))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x468*(x470.value)*(x471.value)*((((new_r20*sj3))+(((-1.0)*new_r01*sj4))))), ((-1.0)*new_r20*x468));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x472=IKsin(j5);
IkReal x473=IKcos(j5);
IkReal x474=(cj3*new_r00);
IkReal x475=(cj3*cj4);
IkReal x476=(cj4*sj3);
IkReal x477=((1.0)*sj3);
IkReal x478=((1.0)*sj4);
IkReal x479=((1.0)*x473);
IkReal x480=(sj3*x472);
IkReal x481=((1.0)*x472);
evalcond[0]=(((sj4*x473))+new_r20);
evalcond[1]=((((-1.0)*x472*x478))+new_r21);
evalcond[2]=(((cj4*x472))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*x481))+(((-1.0)*new_r00*x477))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x479))+(((-1.0)*new_r01*x477))+((cj3*new_r11)));
evalcond[5]=(((x472*x475))+new_r01+((sj3*x473)));
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x479))+x474);
evalcond[7]=((((-1.0)*x475*x479))+x480+new_r00);
evalcond[8]=(((x472*x476))+(((-1.0)*cj3*x479))+new_r11);
evalcond[9]=((((-1.0)*x476*x479))+(((-1.0)*cj3*x481))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x478))+((new_r01*x475))+((new_r11*x476))+x472);
evalcond[11]=(((cj4*x474))+((new_r10*x476))+(((-1.0)*x479))+(((-1.0)*new_r20*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x483=IKPowWithIntegerCheck(sj4,-1);
if(!x483.valid){
continue;
}
IkReal x482=x483.value;
CheckValue<IkReal> x484=IKPowWithIntegerCheck(sj3,-1);
if(!x484.valid){
continue;
}
if( IKabs((x482*(x484.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x482)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x482*(x484.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*new_r20*x482))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x482*(x484.value)*(((((-1.0)*cj3*cj4*new_r20))+(((-1.0)*new_r00*sj4))))), ((-1.0)*new_r20*x482));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x485=IKsin(j5);
IkReal x486=IKcos(j5);
IkReal x487=(cj3*new_r00);
IkReal x488=(cj3*cj4);
IkReal x489=(cj4*sj3);
IkReal x490=((1.0)*sj3);
IkReal x491=((1.0)*sj4);
IkReal x492=((1.0)*x486);
IkReal x493=(sj3*x485);
IkReal x494=((1.0)*x485);
evalcond[0]=(((sj4*x486))+new_r20);
evalcond[1]=((((-1.0)*x485*x491))+new_r21);
evalcond[2]=(((new_r11*sj3))+((cj4*x485))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x490))+(((-1.0)*x494))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*x492))+(((-1.0)*new_r01*x490))+((cj3*new_r11)));
evalcond[5]=(((x485*x488))+new_r01+((sj3*x486)));
evalcond[6]=(((new_r10*sj3))+x487+(((-1.0)*cj4*x492)));
evalcond[7]=((((-1.0)*x488*x492))+x493+new_r00);
evalcond[8]=(((x485*x489))+(((-1.0)*cj3*x492))+new_r11);
evalcond[9]=((((-1.0)*x489*x492))+(((-1.0)*cj3*x494))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x491))+((new_r11*x489))+x485+((new_r01*x488)));
evalcond[11]=((((-1.0)*new_r20*x491))+(((-1.0)*x492))+((new_r10*x489))+((cj4*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x495=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x495.value)))+(x496.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x497=IKsin(j5);
IkReal x498=IKcos(j5);
IkReal x499=(cj3*new_r00);
IkReal x500=(cj3*cj4);
IkReal x501=(cj4*sj3);
IkReal x502=((1.0)*sj3);
IkReal x503=((1.0)*sj4);
IkReal x504=((1.0)*x498);
IkReal x505=(sj3*x497);
IkReal x506=((1.0)*x497);
evalcond[0]=(((sj4*x498))+new_r20);
evalcond[1]=((((-1.0)*x497*x503))+new_r21);
evalcond[2]=(((new_r11*sj3))+((cj4*x497))+((cj3*new_r01)));
evalcond[3]=((((-1.0)*new_r00*x502))+(((-1.0)*x506))+((cj3*new_r10)));
evalcond[4]=((((-1.0)*new_r01*x502))+(((-1.0)*x504))+((cj3*new_r11)));
evalcond[5]=(((x497*x500))+((sj3*x498))+new_r01);
evalcond[6]=(((new_r10*sj3))+(((-1.0)*cj4*x504))+x499);
evalcond[7]=(x505+new_r00+(((-1.0)*x500*x504)));
evalcond[8]=(((x497*x501))+(((-1.0)*cj3*x504))+new_r11);
evalcond[9]=((((-1.0)*x501*x504))+(((-1.0)*cj3*x506))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x503))+((new_r11*x501))+x497+((new_r01*x500)));
evalcond[11]=((((-1.0)*new_r20*x503))+(((-1.0)*x504))+((cj4*x499))+((new_r10*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - abb_irb4600_60_205 (c0aed50c9561bc4247793c8fdb2198ce)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
